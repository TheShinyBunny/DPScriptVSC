{
	"$schema": "./nbt_registry.schema.json",
	"strict": true,
	"base": {},
	"values": {
		"container":{
			"abstract": true,
			"mixins": ["lockable","namable"],
			"tags": {
				"Items":{
					"desc": "The items in the container",
					"type": "list",
					"context": {
						"item":"item",
						"context": {
							"slot":true
						}
					}
				}
			}
		},
		"banner": {
			"mixins": ["namable"],
			"tags": {
				"Patterns":{
					"type": "list",
					"desc": "Banner patterns",
					"context": {
						"item":"nbt",
						"context": {
							"tags": {
								"Color":{
									"type":"color_id"
								},
								"Pattern":{
									"type":"indexed_identifier",
									"context":{
										"values":{
											"bs":"bottom_stripe",
											"ts":"top_stripe",
											"ls":"left_stripe",
											"rs":"right_stripe",
											"cs":"center_stripe",
											"ms":"middle_stripe",
											"drs":"down_right_stripe",
											"dls":"down_left_stripe",
											"ss":"small_stripes",
											"cr":"diagonal_cross",
											"sc":"square_cross",
											"ld":"left_top_diagonal",
											"rud":"right_top_diagonal",
											"lud":"left_bottom_diagonal",
											"rd":"right_bottom_diagonal",
											"vh":"vertical_half_left",
											"vhr":"vertical_half_right",
											"hh":"horizontal_half_top",
											"hhb":"horizontal_half_bottom",
											"bl":"bottom_left_corner",
											"br":"bottom_right_corner",
											"tl":"top_left_corner",
											"tr":"top_right_corner",
											"bt":"bottom_triangle",
											"tt":"top_triangle",
											"bts":"bottom_triangle_sawtooth",
											"tts":"top_triangle_sawtooth",
											"mc":"middle_circle",
											"mr":"middle_rhombus",
											"bo":"border",
											"cbo":"curly_border",
											"bri":"brick",
											"gra":"gradient",
											"gru":"gradient_upside_down",
											"cre":"creeper",
											"sku":"skull",
											"flo":"flower",
											"moj":"mojang",
											"glb":"globe"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"barrel":{
			"extends": "container"
		},
		"beacon":{
			"tags": {
				"Levels":{
					"desc": "The number of levels available from the pyramid",
					"type": "int"
				},
				"Primary":{
					"desc": "The primary effect selected",
					"type": "effect_id"
				},
				"Secondary":{
					"desc": "The secondary effect selected",
					"type": "effect_id"
				}
			}
		},
		"bed":{},
		"beehive":{
			"tags": {
				"FlowerPos":{
					"desc": "The position of a nearby flower",
					"type": "list",
					"context": {
						"item":"int",
						"count": 3
					}
				},
				"Bees":{
					"desc": "The bees currently inside the hive",
					"type": "list",
					"context": {
						"item":"nbt",
						"context":{
							"tags":{
								"MinOccupationTicks":{
									"type":"int"
								},
								"TicksInHive":{
									"type":"int"
								},
								"EntityData":{
									"type":"nbt",
									"context":{
										"registry":"entities",
										"entry":"bee"
									}
								}
							}
						}
					}
				}
			}
		},
		"bell":{},
		"blast_furnace":{
			"extends": "furnace"
		},
		"brewing_stand":{
			"extends": "container",
			"tags":{
				"BrewTime":{
					"desc": "The number of ticks the potions have left to brew",
					"type": "short"
				},
				"Fuel":{
					"type": "byte",
					"desc": "Remaining fuel for the brewing stand"
				}
			}
		},
		"campfire":{
			"tags": {
				"Items":{
					"desc": "The items currently cooking",
					"type": "list",
					"context": {
						"item":"item"
					}
				},
				"CookingTimes":{
					"desc": "Mapping of how many ticks each item has been cooking",
					"type":"list",
					"context": {
						"item":"int",
						"count": 4
					}
				},
				"CookingTotalTimes":{
					"desc": "Mapping of how many ticks each item should be cooking for",
					"type":"list",
					"context": {
						"item":"int",
						"count": 4
					}
				}
			}
		},
		"chest":{
			"extends": "container"
		},
		"comparator":{
			"tags": {
				"OutputSignal":{
					"desc": "The comparator's output redstone signal strength",
					"type":"int"
				}
			}
		},
		"command_block":{
			"mixins": ["namable","global.command_container"],
			"tags": {
				"powered":{
					"type":"bool",
					"desc": "Whether the command block is powered by redstone"
				},
				"auto":{
					"type":"bool",
					"desc": "True if the command block is set to 'Always Active' in the GUI."
				},
				"conditionMet":{
					"type":"bool",
					"desc": "Whether the previous command block was successful. True if the current command block is not conditional."
				},
				"UpdateLastExecution":{
					"desc": "Defaults to true. If set to false, the 'LastExecution' property won't be updated or checked.",
					"type":"bool"
				},
				"LastExecution":{
					"desc": "The last time the command executed",
					"type":"long"
				}
			}
		},
		"conduit":{
			"tags": {
				"Target":{
					"desc": "The UUID of the hostile mob the conduit is attacking",
					"type":"uuid"
				}
			}
		},
		"daylight_detector":{},
		"dispenser":{
			"extends": "container"
		},
		"dropper":{
			"extends":"container"
		},
		"enchanting_table":{
			"mixins": ["namable"]
		},
		"ender_chest":{},
		"end_gateway":{
			"tags": {
				"Age":{
					"desc": "Ticks the portal existed. Used to determine when to display the beam.",
					"type":"int"
				},
				"ExactTeleport":{
					"desc": "Whether to teleport entities directly to the exit portal instead of near it",
					"type":"bool"
				},
				"ExitPortal":{
					"desc": "The position of the destination portal this gateway teleports to",
					"type":"xyz"
				}
			}
		},
		"end_portal":{},
		"furnace":{
			"extends": "container",
			"tags": {
				"BurnTime":{
					"desc": "Ticks left until the fuel runs out",
					"type":"short"
				},
				"CookTime":{
					"desc": "Number of ticks the current item has been smelting for. When it reaches the value of 'CookTimeTotal', the item finishes cooking.",
					"type":"short"
				},
				"CookTimeTotal":{
					"desc": "The total number of ticks the currently smelting item needs to cook for, according to its recipe.",
					"type":"short"
				},
				"RecipesUsed":{
					"desc": "Saves the recipes used in the furnace and the amount each recipe was used. Used to calculate the xp the player deserves when it takes an item.",
					"type":"nbt",
					"context": {
						"valueTypes":"int"
					}
				}
			}
		},
		"hopper":{
			"extends": "container",
			"tags": {
				"TransferCooldown":{
					"desc": "Time until the hopper transfers item. After a transfer this value is set to 8 and ticks down.",
					"type":"int"
				}
			}
		},
		"jigsaw":{
			"tags": {
				"joint":{
					"type":"enum",
					"context": {
						"values": ["aligned","rollable"]
					}
				},
				"name":{
					"type":"string"
				},
				"pool":{
					"desc": "The pool of structure components this jigsaw can generate",
					"type":"string"
				},
				"final_state":{
					"desc": "The block this jigsaw turns to after generating a structure from its pool",
					"type":"block_id"
				},
				"target":{
					"type":"string"
				}
			}
		},
		"jukebox":{
			"tags": {
				"RecordItem":{
					"desc": "The music disc inside this jukebox",
					"type":"item"
				}
			}
		},
		"lectern":{
			"tags": {
				"Book":{
					"desc":"The book item stored in the lectern",
					"type":"item"
				},
				"Page":{
					"desc": "The page of the book the lectern is on",
					"type":"int"
				}
			}
		},
		"mob_spawner":{
			"mixins": ["global.base_spawner"]
		},
		"piston":{
			"tags": {
				"blockState":{
					"desc": "The moving block state",
					"type":"block"
				},
				"facing":{
					"desc": "The direction the block is moving",
					"type":"indexed_identifier",
					"context": {
						"values": "direction"
					}
				},
				"progress":{
					"desc": "Percentage of the distance moved, when 0 is not moved and 1 is fully moved.",
					"type":"float"
				},
				"extending":{
					"desc": "True if the block is being pushed, false if it's pulled",
					"type":"bool"
				},
				"source":{
					"desc": "True if this is the piston head itself, false if it's another block being pushed by it.",
					"type":"bool"
				}
			}
		},
		"shulker_box":{
			"extends": "container"
		},
		"sign":{
			"tags": {
				"Color":{
					"desc": "The color of the text",
					"type":"enum",
					"context": {
						"registry": "dyeColors"
					}
				},
				"Text1":{
					"desc": "The first line of text",
					"type":"compound",
					"context": {
						"json_type": "sign"
					},
					"post_processor": "stringify"
				},
				"Text2":{
					"desc": "The second line of text",
					"type":"compound",
					"context": {
						"json_type": "sign"
					},
					"post_processor": "stringify"
				},
				"Text3":{
					"desc": "The third line of text",
					"type":"compound",
					"context": {
						"json_type": "sign"
					},
					"post_processor": "stringify"
				},
				"Text4":{
					"desc": "The fourth line of text",
					"type":"compound",
					"context": {
						"json_type": "sign"
					},
					"post_processor": "stringify"
				}
			}
		},
		"skull":{
			"tags": {
				"SkullOwner":{
					"desc": "The player head's skin properties",
					"type":"nbt",
					"context": {
						"tags": {
							"Id":{
								"desc": "The UUID of the player",
								"type":"uuid"
							},
							"Name":{
								"desc": "The name of the player",
								"type":"string"
							}
						}
					}
				},
				"ExtraType":{
					"desc": "The player name to use his skin. This value is not saved, and used to populate the 'SkullOwner' property if it doesn't exist.",
					"type":"string",
					"writeonly": true
				}
			}
		},
		"smoker":{
			"extends": "furnace"
		},
		"structure_block":{
			"tags": {
				"name":{
					"desc": "The name of the structure",
					"type":"string"
				},
				"metadata":{
					"desc": "Custom data for the structure. Only used internally in minecraft structures (for example, to spawn a chest or an entity at this position)",
					"type":"string"
				},
				"offset":{
					"desc": "The offset to the corner of the structure",
					"type":"xyz",
					"context": {
						"prefix":"pos"
					}
				},
				"size":{
					"desc": "The size of the structure",
					"type":"xyz",
					"context": {
						"prefix": "size"
					}
				},
				"rotation":{
					"desc": "The rotation of the structure",
					"type":"enum",
					"context": {
						"values": [
							"NONE",
							"CLOCKWISE_90",
							"CLOCKWISE_180",
							"COUNTERCLOCKWISE_90"
						]
					}
				},
				"mirror":{
					"desc": "How the structure is mirrored",
					"type":"enum",
					"context": {
						"values": [
							"NONE",
							"LEFT_RIGHT",
							"FRONT_BACK"
						]
					}
				},
				"mode":{
					"desc": "The structure block mode",
					"type":"enum",
					"context": {
						"values": [
							"SAVE",
							"LOAD",
							"CORNER",
							"DATA"
						]
					}
				},
				"integrity":{
					"type":"float",
					"desc": "Percentage of the blocks in the structure to place. The smaller this value is, the higher the chance a block won't be placed."
				},
				"seed":{
					"desc": "The seed for the 'integrity' decay RNG",
					"type":"long"
				},
				"ignoreEntities":{
					"desc": "True to not save/load entities",
					"type":"bool"
				},
				"showboundingbox":{
					"desc": "Whether to show the structure's bounding box",
					"type":"bool"
				},
				"powered":{
					"type":"bool",
					"desc": "Whether the structure block is powered by redstone"
				}
			}
		}
	},
	"mixins": {
		"lockable":{
			"tags": {
				"Lock":{
					"type": "string",
					"desc": "Prevents the container from opening unless the player is holding an item with a name matching this property"
				}
			}
		},
		"namable":{
			"tags": {
				"CustomName":{
					"desc": "The name of the tile entity. Containers display this name in the GUI.",
					"type": "compound",
					"context": {
						"json_type":"title"
					},
					"post_processor": "stringify"
				}
			}
		}
	}
}