{
	"$schema": "http://json-schema.org/schema",
	"definitions": {
		"value_type":{
			"enum": ["int","double","short","float","bool","long","string","effect","enchantment","item","blockstate","block_id","global_pos","list","nbt","color_id","effect_id","byte","indexed_identifier","uuid","enum","xyz","block","rgb","flags","compound","variable","int_range","double_range"]
		},
		"single_tag":{
			"properties": {
				"type":{
					"description": "The type of value of this property.",
					"$ref": "#/definitions/value_type"
				},
				"context":{
					"description": "Additional settings for the type parsing.",
					"type":"object"
				},
				"desc": {
					"description": "A documentation string for the purpose of this property.",
					"type":"string"
				},
				"path":{
					"description": "An alternate path to set the value in the data compound, instead of the 'key' property. A path node in a structure of [<index>] will set the value in the specified index in a list (the list key is the previous node).",
					"type":["array"]
				},
				"modifications":{
					"description": "Additional modifications to apply to the data compound right before the value is set. The modifications are merged to the data, and do not replace existing entries.",
					"type":"object"
				},
				"writeonly":{
					"description": "Set to true if this property can only be written to data, and not be read from it.",
					"type":"boolean"
				},
				"post_processor":{
					"type":["string","object"]
				},
				"only_when":{
					"type":"array",
					"items": {
						"type":"string"
					}
				}
			},
			"required": ["type"],
			"allOf": [
				{
					"if": {"properties": {"type":{"const":"list"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_list"
							}
						}
					}
				},
				{
					"if": {"properties": {"type":{"const":"indexed_identifier"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_indexed_id"
							}
						},
						"required": ["context"]
					}
				},
				{
					"if": {"properties": {"type":{"const":"nbt"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_nbt"
							}
						}
					}
				},
				{
					"if": {"properties": {"type":{"const":"enum"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_enum"
							}
						},
						"required": ["context"]
					}
				},
				{
					"if": {"properties": {"type":{"const":"rgb"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_rgb"
							}
						}
					}
				},
				{
					"if": {"properties": {"type":{"const":"xyz"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_xyz"
							}
						}
					}
				},
				{
					"if": {"properties": {"type":{"const":"flags"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_flags"
							}
						}
					}
				},
				{
					"if": {"properties": {"type":{"const":"item"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_item"
							}
						}
					}
				},
				{
					"if": {"properties": {"type":{"const":"compound"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_compound"
							}
						}
					}
				}
			],
			"additionalProperties": false
		},

		"ctx_list":{
			"type":"object",
			"properties": {
				"item":{
					"description": "The type of item values",
					"$ref": "#/definitions/value_type"
				},
				"context":{
					"description": "Additional settings for the item's type",
					"type":"object"
				},
				"count":{
					"type":["integer","object"],
					"description": "The number range of items that could be in this list",
					"properties": {
						"from":{
							"type":"integer"
						},
						"to":{
							"type":"integer"
						}
					}
				}
			},
			"additionalProperties": false,
			"required": ["item"],
			"allOf": [
				{
					"if": {"properties": {"item":{"const":"list"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_list"
							}
						}
					}
				},
				{
					"if": {"properties": {"item":{"const":"indexed_identifier"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_indexed_id"
							}
						},
						"required": ["context"]
					}
				},
				{
					"if": {"properties": {"item":{"const":"nbt"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_nbt"
							}
						}
					}
				},
				{
					"if": {"properties": {"item":{"const":"enum"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_enum"
							}
						},
						"required": ["context"]
					}
				},
				{
					"if": {"properties": {"item":{"const":"rgb"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_rgb"
							}
						}
					}
				},
				{
					"if": {"properties": {"item":{"const":"xyz"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_xyz"
							}
						}
					}
				},
				{
					"if": {"properties": {"item":{"const":"flags"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_flags"
							}
						}
					}
				},
				{
					"if": {"properties": {"item":{"const":"item"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_item"
							}
						}
					}
				},
				{
					"if": {"properties": {"item":{"const":"compound"}}},
					"then": {
						"properties": {
							"context":{
								"$ref": "#/definitions/ctx_compound"
							}
						}
					}
				}
			]
		},
		"ctx_indexed_id":{
			"type":"object",
			"properties": {
				"values":{
					"description": "A key-value pairs of the valid values for the indexed identifier. The key is the real value to set in the data and the value is the alias.",
					"type":["object","string"]
				},
				"numeralIndex":{
					"description": "Set to true to treat keys of the 'values' property as numbers. The result value will be a number (integer by default - change using 'indexType')",
					"type":"boolean"
				},
				"indexType":{
					"description": "A custom number type suffix, for example L for long numbers, s for short, b for byte, etc.",
					"type":"string"
				}
			},
			"additionalProperties": false,
			"required": ["values"]
		},
		"ctx_nbt":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"tags":{
					"description": "Valid tags in the NBT value",
					"$ref": "./compound_tags.schema.json"
				},
				"strict":{
					"type":"boolean",
					"description": "True if unknown properties are not allowed"
				},
				"registry":{
					"description": "A registry type to use as the base tags",
					"enum": ["items","entities","tileEntities"]
				},
				"entry":{
					"description": "Either a string - the ID of the entry in the specified 'registry' to use to validate tags. Or an object with the property 'from' - the key of another property in the data to evaluate the entry ID from.",
					"oneOf": [
						{
							"type":"object",
							"properties": {
								"from":{
									"type":["array"]
								}
							}
						},
						{
							"type":"string"
						}
					]
				},
				"valueTypes":{
					"description": "The type of values for the properties in the NBT. Cannot be used together with other properties of nbt context.",
					"$ref": "#/definitions/value_type"
				},
				"valueTypesCtx":{
					"type":"object"
				}
			}
		},
		"ctx_enum":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"values":{
					"description": "A list of possible identifier values for the enum",
					"type":"array",
					"items": {
						"type":"string"
					}
				},
				"registry":{
					"type":"string"
				}
			}
		},
		"ctx_rgb":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"fireworks":{
					"description": "Set to true to allow fireworks colors",
					"type":"boolean"
				}
			}
		},
		"ctx_xyz":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"prefix":{
					"type":"string"
				},
				"double":{
					"type":"boolean"
				},
				"suffix":{
					"type":"string"
				}
			}
		},
		"ctx_flags":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"flags":{
					"propertyNames": {
						"pattern": "^[0-9]+$"
					},
					"additionalProperties": {
						"type":"string"
					}
				}
			}
		},
		"ctx_item":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"slot":{
					"type":"boolean"
				}
			}
		},
		"ctx_variable":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"type":{
					"type":"string"
				}
			}
		},
		"ctx_compound":{
			"type":"object",
			"additionalProperties": false,
			"properties": {
				"predicate":{
					"oneOf": [
						{
							"type":"string"
						},
						{
							"$ref": "#/definitions/root"
						}
					]
				},
				"json_type":{
					"enum": ["title","chat","book","sign","other"]
				},
				"keys":{
					"type":"string"
				},
				"values":{
					"$ref":"#/definitions/single_tag"
				}
			}
		},
		"root":{
			"type":"object",
			"additionalProperties": {
				"type":"object",
				"$ref": "#/definitions/single_tag"
			}
		}
	},
	"$ref": "#/definitions/root"
}