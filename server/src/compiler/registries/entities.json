{
	"$schema": "./reg_schema.json",
	"strict": true,
	"base": [
		{
			"key": "Pos",
			"aliases": ["position"],
			"desc": "The position of the entity",
			"type": "list",
			"typeContext": {
				"item":"double",
				"count": 3
			}
		},
		{
			"key": "Motion",
			"aliases": ["velocity","vel"],
			"desc": "The current velocity of the entity",
			"type": "list",
			"typeContext": {
				"item":"double",
				"count": 3
			}
		},
		{
			"key": "Rotation",
			"desc": "A list of [horizontal (0 to 360),vertical (-90 to 90)] rotation values.",
			"type": "list",
			"typeContext": {
				"item":"float",
				"count": 2
			}
		},
		{
			"key": "FallDistance",
			"aliases": ["fall"],
			"desc": "The number of blocks the entity has fallen",
			"type": "float"
		},
		{
			"key": "Fire",
			"desc": "Ticks left for the entity to burn",
			"type": "short"
		},
		{
			"key": "Air",
			"desc": "Ticks left for the entity before it starts drowning",
			"type": "short"
		},
		{
			"key": "OnGround",
			"desc": "Whether this entity is standing on the ground",
			"type": "bool"
		},
		{
			"key": "NoGravity",
			"desc": "Set to true to disable the entity's gravity",
			"type": "bool"
		},
		{
			"key":"Invulnerable",
			"aliases": ["invincible"],
			"desc": "When true, the entity will not take damage",
			"type": "bool"
		},
		{
			"key": "PortalCooldown",
			"aliases": ["time_until_portal"],
			"desc": "Ticks left before the entity can go through a portal",
			"type": "int"
		},
		{
			"key": "UUID",
			"desc": "This entity's Universally Unique IDentifier. The 128-bit UUID is stored as four 32-bit integers, ordered from most to least significant.",
			"type": "uuid"
		},
		{
			"key": "Silent",
			"desc": "When true, the entity will not make any sounds",
			"type": "bool"
		},
		{
			"key": "Passengers",
			"aliases": ["riders"],
			"desc": "Entities that are riding this entity.",
			"type": "list",
			"typeContext": {
				"item": "nbt",
				"itemContext": {
					"registry":"entities",
					"entry":{
						"from":"id"
					},
					"tags":[
						{
							"key":"id",
							"desc":"The ID of the entity",
							"type":"string"
						}
					]
				}
			}
		},
		{
			"key": "Glowing",
			"desc": "True to make the entity glow and be visible through blocks",
			"type": "bool"
		},
		{
			"key": "Tags",
			"desc": "Custom tags assigned to the entity. Can be changed with @<selector>.myTag = true/false",
			"type": "list",
			"typeContext": {
				"item":"string"
			}
		}
	],
	"values":{
		"living_entity":{
			"abstract": true,
			"tags": [
				{
					"key": "Health",
					"type": "float",
					"desc": "Amount of health the entity has",
					"aliases": ["hp"]
				},
				{
					"key": "AbsorptionAmount",
					"type": "float",
					"desc": "Amount of extra health added by Absorption effect",
					"aliases": ["absorption"]
				},
				{
					"key": "HurtTime",
					"type": "short",
					"desc": "Number of ticks the mob turns red for after being hit. 0 when not recently hit."
				},
				{
					"key": "DeathTime",
					"desc": "Number of ticks the mob has been dead for. Controls death animations. 0 when alive.",
					"type": "short"
				},
				{
					"key": "FallFlying",
					"desc": "When true, causes a non-player entity to automatically fall when wearing an Elytra. Can be used to detect whether a player is gliding.",
					"type": "bool"
				},
				{
					"key": "Attributes",
					"desc": "A list of Attributes for this mob, to control movement speed, max health, etc.",
					"type": "list",
					"typeContext": {
						"item":"nbt",
						"itemContext":{
							"tags":[
								{
									"key":"Name",
									"desc":"The name of this attribute",
									"type":"string"
								},
								{
									"key":"Base",
									"desc":"The base value of this attribute",
									"type":"double"
								},
								{
									"key":"Modifiers",
									"desc":"A list of modifiers to apply to this attribute",
									"type":"list",
									"typeContext":{
										"item":"nbt",
										"itemContext":{
											"tags":[
												{
													"key": "Name",
													"desc": "The modifier's name",
													"type": "string"
												},
												{
													"key": "Amount",
													"desc": "The amount by which to modify the base value of the attribute",
													"type":"double"
												},
												{
													"key":"Operation",
													"desc":"Defines the operation this modifier executes on the attribute's base value",
													"type":"indexed_identifier",
													"typeContext":{
														"numeralIndex":true,
														"values":{
															"0":"add",
															"1":"multiply_base",
															"2":"multiply"
														}
													}
												},
												{
													"key":"UUID",
													"desc":"A UUID for this modifier",
													"type":"uuid"
												}
											]
										}
									}
								}
							]
						}
					}
				},
				{
					"key": "ActiveEffects",
					"aliases": ["effects"],
					"desc": "The list of potion effects on this mob",
					"type": "list",
					"typeContext": {
						"item":"effect"
					}
				},
				{
					"key": "Team",
					"desc": "The team the entity should be in. Can only used when creating the entity, as it is not saved in its data.",
					"writeonly": true,
					"type": "string"
				}
			]
		},
		"mob":{
			"abstract": true,
			"extends": "living_entity",
			"mixins": ["armor_and_hands"],
			"tags": [
				{
					"key": "DeathLootTable",
					"aliases": ["loot_table"],
					"desc": "A loot table to be dropped when this mob is killed",
					"type": "string"
				},
				{
					"key": "DeathLootTableSeed",
					"aliases": ["loot_seed"],
					"type": "long",
					"desc": "Seed for generating the death loot table"
				},
				{
					"key": "CanPickUpLoot",
					"aliases": ["pick_loot","pick_items"],
					"type": "bool",
					"desc": "Whether this mob can pick up dropped items"
				},
				{
					"key": "NoAI",
					"aliases": ["disable_ai"],
					"desc": "True to disable this mob's AI, so it won't move",
					"type": "bool"
				},
				{
					"key": "NoAI",
					"dontUseKeyAsAlias": true,
					"aliases": ["ai"],
					"desc": "True to enable this mob's AI",
					"type": "inverted_bool"
				},
				{
					"key": "PersistenceRequired",
					"type": "bool",
					"aliases": ["persistent"],
					"desc": "When true, the mob will not despawn naturally"
				},
				{
					"key": "PersistenceRequired",
					"dontUseKeyAsAlias": true,
					"type": "inverted_bool",
					"aliases": ["despawn"],
					"desc": "When false, the mob will not despawn naturally"
				},
				{
					"key": "LeftHanded",
					"desc": "True if the mob should be left handed",
					"type": "bool"
				}
			]
		},
		"bat":{
			"extends": "mob",
			"tags": [
				{
					"key": "BatFlags",
					"aliases": ["Hanging","upside_down"],
					"desc": "True when the bat is hanging upside down from a block, and false when its flying",
					"type": "bool"
				}
			]
		},
		"blaze":{
			"extends": "mob"
		},
		"breedable":{
			"extends": "mob",
			"abstract": true,
			"tags": [
				{
					"key": "InLove",
					"type": "int",
					"desc": "Number of ticks until the mob loses its breeding hearts and stops searching for a mate. 0 when not searching for a mate.",
					"aliases": ["ticks_in_love"]
				},
				{
					"key": "Age",
					"desc": "The age of the mob in ticks. When negative, the mob is a baby.",
					"type": "int"
				},
				{
					"key": "ForcedAge",
					"type": "int",
					"desc": "A value modifying the age to speed up growth. Incremented when the animal is fed"
				},
				{
					"key": "LoveCause",
					"type": "uuid",
					"desc": "The UUID of the player that caused this animal to breed"
				}
			]
		},
		"cat":{
			"extends": "breedable",
			"mixins": ["collar","tamable"],
			"tags": [
				{
					"key": "CatType",
					"desc": "The ID of the cat's skin (more info: https://minecraft.gamepedia.com/Cat/DV)",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex":true,
						"values":{
							"0":"tabby",
							"1":"tuxedo",
							"2":"red",
							"3":"siamese",
							"4":"british_sorthair",
							"5":"calico",
							"6":"persian",
							"7":"ragdoll",
							"8":"white",
							"9":"jellie",
							"10":"black"
						}
					}
				}
			]
		},
		"cave_spider":{
			"extends": "mob"
		},
		"chicken":{
			"extends": "breedable",
			"tags": [
				{
					"key": "IsChickenJockey",
					"type": "bool",
					"aliases": ["jockey"],
					"desc": "Whether this chicken is a chicken jockey (a baby zombie riding it). This also allows the chicken to despawn and drop 10 xp when killed."
				},
				{
					"key": "EggLayTime",
					"aliases": ["egg_timer","egg_cooldown"],
					"desc": "Number of ticks until the chicken lays its egg. When reaches 0, the chicken lays the egg and this is set to a random number between 6000 - 12000",
					"type": "int"
				}
			]
		},
		"abstract_fish":{
			"abstract": true,
			"extends": "mob",
			"tags": [
				{
					"key": "FromBucket",
					"desc": "Whether the fish was spawned from a bucket, and thus should not despawn",
					"type": "bool"
				}
			]
		},
		"cod":{
			"extends": "abstract_fish"
		},
		"cow":{
			"extends": "breedable"
		},
		"creeper":{
			"extends": "mob",
			"tags": [
				{
					"key": "powered",
					"aliases": ["charged"],
					"desc": "True if the creeper is charged from a lightning",
					"type": "bool"
				},
				{
					"key": "ExplosionRadius",
					"desc": "Radius of the creeper's explosion",
					"type": "byte"
				},
				{
					"key": "Fuse",
					"desc": "Ticks until the creeper explodes. Defaults to 30.",
					"type": "short"
				},
				{
					"key": "ignited",
					"desc": "Whether the creeper should start exploding",
					"type": "bool"
				}
			]
		},
		"dolphin":{
			"extends": "mob",
			"tags": [
				{
					"key": "TreasurePosX",
					"desc": "The dolphin's X coordinate destination when leading a player to treasure",
					"aliases": ["treasureX"],
					"type": "int"
				},
				{
					"key": "TreasurePosY",
					"desc": "The dolphin's Y coordinate destination when leading a player to treasure",
					"aliases": ["treasureY"],
					"type": "int"
				},
				{
					"key": "TreasurePosY",
					"desc": "The dolphin's Y coordinate destination when leading a player to treasure",
					"aliases": ["treasureY"],
					"type": "int"
				},
				{
					"key": "GotFish",
					"desc": "True if the dolphin got fish from a player",
					"type": "bool"
				},
				{
					"key": "CanFindTreasure",
					"desc": "True if this dolphin can lead a player to treasure",
					"type": "bool"
				}
			]
		},
		"abstract_horse":{
			"abstract": true,
			"extends": "breedable",
			"tags": [
				{
					"key": "Tame",
					"aliases": ["tamed"],
					"desc": "True if the horse is tamed",
					"type": "bool"
				}
			]
		},
		"abstract_donkey":{
			"extends": "abstract_horse",
			"abstract": true,
			"tags": [
				{
					"key": "ChestedHorse",
					"desc": "True if this horse has a chest",
					"aliases": ["chested","has_chest"],
					"type": "bool"
				},
				{
					"key": "Items",
					"desc": "Items in this horse's chest",
					"type": "list",
					"typeContext": {
						"item":"item"
					}
				}
			]
		},
		"donkey":{
			"extends": "abstract_donkey",
			"mixins": ["saddled_horse"]
		},
		"abstract_zombie":{
			"extends": "mob",
			"abstract": true,
			"tags": [
				{
					"key": "IsBaby",
					"aliases": ["baby"],
					"desc": "Whether this zombie is a baby",
					"type": "bool"
				},
				{
					"key": "CanBreakDoors",
					"aliases": ["break_doors"],
					"desc": "True if this zombie can break doors",
					"type": "bool"
				}
			]
		},
		"drowned":{
			"extends": "abstract_zombie"
		},
		"elder_guardian":{
			"extends": "mob"
		},
		"ender_dragon":{
			"extends": "mob",
			"tags": [
				{
					"key": "DragonPhase",
					"aliases": ["phase"],
					"desc": "The ID of the dragon's current state",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex": true,
						"values":{
							"0":"circling",
							"1":"strafing",
							"2":"fly_to_portal",
							"3":"land_on_portal",
							"4":"take_off_portal",
							"5":"breath_attack",
							"6":"find_breath_target",
							"7":"roar_before_breath",
							"8":"charge_player",
							"9":"death",
							"10":"static"
						}
					}
				}
			]
		},
		"enderman":{
			"extends": "mob",
			"tags": [
				{
					"key": "carriedBlockState",
					"aliases": ["held_block","holding"],
					"desc": "The block the enderman is holding",
					"type": "block"
				}
			]
		},
		"endermite":{
			"extends": "mob",
			"tags": [
				{
					"key": "Lifetime",
					"desc": "How long this endermite has existed for. Despawns when this reaches 2400 (2 minutes)",
					"type": "int"
				},
				{
					"key": "PlayerSpawned",
					"desc": "Whether the endermite was spawned by a player, and thus endermen should attack it.",
					"type": "bool"
				}
			]
		},
		"raider":{
			"abstract": true,
			"extends": "mob",
			"tags": [
				{
					"key":"HasRaidGoal",
					"type": "bool"
				},
				{
					"key": "Patrolling",
					"desc": "Whether this raider entity has spawned in a pillager patrol.",
					"type": "bool"
				},
				{
					"key": "CanJoinRaid",
					"desc": "True if this raider can join raids. Is normally set to false for witches.",
					"type": "bool"
				},
				{
					"key": "PatrolLeader",
					"desc": "True if this raider is the patrol's leader",
					"type": "bool"
				},
				{
					"key": "PatrolTarget",
					"type": "xyz",
					"desc": "The XYZ target of the patrol"
				},
				{
					"key": "RaidId",
					"desc": "The ID of the raid this mob belongs to",
					"type": "int",
					"aliases": ["raid"]
				},
				{
					"key": "Wave",
					"desc": "The wave index in the raid this mob spawned in",
					"type": "int"
				}
			]
		},
		"spellcasting_raider":{
			"extends": "raider",
			"abstract": true,
			"tags": [
				{
					"key": "SpellTicks",
					"desc": "Ticks until this mob can cast its spell",
					"type": "int"
				}
			]
		},
		"evoker":{
			"extends": "spellcasting_raider"
		},
		"fox":{
			"extends": "breedable",
			"tags":[
				{
					"key": "Trusted",
					"desc": "The UUIDs of the players the fox trusts. Only the first and last UUIDs are used.",
					"type": "list",
					"typeContext": {
						"item":"uuid"
					}
				},
				{
					"key": "Sleeping",
					"desc": "True if the fox is sleeping",
					"type": "bool"
				},
				{
					"key": "Type",
					"desc": "The fox skin type",
					"type": "enum",
					"typeContext": {
						"values":[
							"red",
							"snow"
						]
					}
				},
				{
					"key": "Sitting",
					"desc": "True if the fox is sitting",
					"type": "bool"
				},
				{
					"key": "Crouching",
					"desc": "True if the fox is crouching",
					"type": "bool"
				}
			]
		},
		"ghast":{
			"extends": "mob",
			"tags": [
				{
					"key": "ExplosionPower",
					"desc": "The radius of the explosion created by the fireballs this ghast fires. Defaults to 1.",
					"type": "int"
				}
			]
		},
		"giant":{
			"extends": "mob"
		},
		"guardian":{
			"extends": "mob"
		},
		"horse":{
			"extends": "abstract_horse",
			"mixins": ["eating_horse"],
			"tags": [
				{
					"key": "ArmorItem",
					"aliases": ["horse_armor"],
					"type": "item",
					"desc": "The armor the horse is wearing"
				},
				{
					"key": "Variant",
					"desc": "The horse color and marking type",
					"type": "horse_variant"
				}
			]
		},
		"husk":{
			"extends": "zombie"
		},
		"illusioner":{
			"extends": "spellcasting_raider"
		},
		"iron_golem":{
			"extends": "mob",
			"tags": [
				{
					"key": "PlayerCreated",
					"desc": "True if this iron golem was spawned by a player using iron blocks and a pumpkin",
					"type": "bool"
				}
			]
		},
		"llama":{
			"extends": "abstract_donkey",
			"tags": [
				{
					"key": "Variant",
					"desc": "The skin type of the llama",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex":true,
						"values":{
							"0":"creamy",
							"1":"white",
							"2":"brown",
							"3":"gray"
						}
					}
				},
				{
					"key": "DecorItem",
					"aliases": ["carpet"],
					"type": "item",
					"desc": "The llama's carpet item"
				}
			]
		},
		"magma_cube":{
			"extends": "slime"
		},
		"mooshroom":{
			"extends": "breedable",
			"tags": [
				{
					"key": "Type",
					"desc": "The type of mooshroom this is",
					"type": "enum",
					"typeContext": {
						"values":[
							"red",
							"brown"
						]
					}
				},
				{
					"key": "EffectId",
					"aliases": ["effect"],
					"type": "effect_id",
					"desc": "The type of effect this brown mooshroom gives to a suspicious stew"
				},
				{
					"key": "EffectDuration",
					"desc": "The duration of the effect the brown mooshroom gives in a suspicious stew",
					"type": "int"
				}
			]
		},
		"mule":{
			"extends": "donkey"
		},
		"ocelot":{
			"extends": "breedable",
			"tags": [
				{
					"key": "Trusting",
					"desc": "Whether this ocelot is trusting players",
					"type": "bool"
				}
			]
		},
		"panda":{
			"extends": "breedable",
			"tags": [
				{
					"key": "MainGene",
					"desc": "The primary gene this panda has. Used to control its behaviour. Weak and Brown genes are not dominant, so both the main and the hidden gene has to be the same for it to be used.",
					"type": "enum",
					"typeContext": {
						"builtin":"panda_genes"
					}
				},
				{
					"key": "HiddenGene",
					"desc": "The secondary gene this panda has. Has a chance to be inherited to this panda's child.",
					"type": "enum",
					"typeContext": {
						"builtin":"panda_genes"
					}
				}
			]
		},
		"parrot":{
			"extends": "mob",
			"mixins": ["tamable"],
			"tags": [
				{
					"key":"Variant",
					"desc": "The color variant of this parrot",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex":true,
						"values":{
							"0":"red",
							"1":"blue",
							"2":"green",
							"3":"cyan",
							"4":"gray"
						}
					}
				}
			]
		},
		"phantom":{
			"extends": "mob",
			"tags": [
				{
					"key": "AX",
					"aliases": ["circlingX"],
					"type": "int",
					"desc": "X position of this phantom's circling center"
				},
				{
					"key": "AY",
					"aliases": ["circlingY"],
					"type": "int",
					"desc": "Y position of this phantom's circling center"
				},
				{
					"key": "AZ",
					"aliases": ["circlingZ"],
					"type": "int",
					"desc": "Z position of this phantom's circling center"
				},
				{
					"key": "Size",
					"desc": "The size of the phantom. Naturally spawned phantoms are always size 0.",
					"type": "int"
				}
			]
		},
		"pig":{
			"extends": "breedable",
			"mixins": ["saddlable"]
		},
		"pillager":{
			"extends": "raider"
		},
		"polar_bear":{
			"extends": "breedable"
		},
		"pufferfish":{
			"extends": "abstract_fish",
			"tags": [
				{
					"key": "PuffState",
					"desc": "The puffiness value of this pufferfish",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex":true,
						"values":{
							"0":"deflated",
							"1":"half_puffed",
							"2":"fully_puffed"
						}
					}
				}
			]
		},
		"rabbit":{
			"extends": "breedable",
			"tags": [
				{
					"key": "RabbitType",
					"aliases": ["type"],
					"desc": "The skin of the rabbit. When not present, defaults to the Toast skin",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex":true,
						"values":{
							"0":"brown",
							"1":"white",
							"2":"black",
							"3":"black_and_white",
							"4":"gold",
							"5":"salt_and_pepper",
							"99":"the_killer_bunny"
						}
					}
				}
			]
		},
		"ravager":{
			"extends": "raider",
			"tags": [
				{
					"key": "AttackTick",
					"desc": "The Ravager's attack cooldown",
					"type": "int"
				},
				{
					"key": "RoarTick",
					"desc": "The Ravager's roar roar attack cooldown",
					"type": "int"
				},
				{
					"key": "StunTick",
					"desc": "The Ravager's stunning attack cooldown",
					"type": "int"
				}
			]
		},
		"salmon":{
			"extends": "abstract_fish"
		},
		"sheep":{
			"extends": "breedable",
			"tags": [
				{
					"key": "Sheared",
					"type": "bool",
					"desc": "True if the sheep is sheared"
				},
				{
					"key": "Color",
					"type": "color_id",
					"desc":"The sheep's wool color"
				}
			]
		},
		"shulker":{
			"extends": "mob",
			"tags": [
				{
					"key": "Peek",
					"type": "byte",
					"desc": "Height of the shulker's head peeking"
				},
				{
					"key": "AttachFace",
					"aliases": ["direction"],
					"desc": "The direction this shulker is facing",
					"type": "direction"
				},
				{
					"key": "Color",
					"desc": "The shulker's color. If unspecified, the default purple color is used.",
					"type": "color_id"
				}
			]
		},
		"silverfish":{
			"extends": "mob"
		},
		"skeleton":{
			"extends": "mob"
		},
		"skeleton_horse":{
			"extends": "abstract_horse",
			"tags": [
				{
					"key": "SkeletonTrap",
					"type": "bool",
					"desc": "True if this skeleton horse is a skeleton trap"
				},
				{
					"key":"SkeletonTrapTime",
					"type": "int",
					"desc": "Ticks this skeleton horse has existed if it's a skeleton trap. When reaches 18000, it despawns."
				}
			]
		},
		"slime":{
			"extends": "mob",
			"tags": [
				{
					"key": "Size",
					"desc": "Determines the slime's size. Also controls the attack damage. Natural spawned values are 0, 1 and 3.",
					"type": "int"
				},
				{
					"key": "wasOnGround",
					"desc": "True if the slime was touching the ground",
					"type": "bool"
				}
			]
		},
		"snow_golem":{
			"extends": "mob",
			"tags": [
				{
					"key": "Pumpkin",
					"desc": "Whether this snow golem is wearing a pumpkin",
					"type": "bool"
				}
			]
		},
		"spider":{
			"extends": "mob"
		},
		"squid":{
			"extends": "mob"
		},
		"stray":{
			"extends": "mob"
		},
		"trader_llama":{
			"extends": "llama",
			"tags": [
				{
					"key": "DespawnDelay",
					"desc": "Time until this trader llama despawns",
					"type": "int"
				}
			]
		},
		"tropical_fish":{
			"extends": "abstract_fish",
			"tags": [
				{
					"key": "Variant",
					"desc": "The tropical fish skin",
					"type": "tropical_variant"
				}
			]
		},
		"turtle":{
			"extends": "breedable",
			"tags": [
				{
					"key": "HasEgg",
					"desc": "True if the turtle has an egg",
					"type": "bool"
				}
			]
		},
		"vex":{
			"extends": "mob",
			"tags": [
				{
					"key": "LifeTicks",
					"aliases": ["life"],
					"desc": "Ticks left before the vex takes damage, and is set back to 20.",
					"type": "int"
				}
			]
		},
		"abstract_trader":{
			"extends": "breedable",
			"abstract": true,
			"mixins": ["villager_offers"]
		},
		"villager":{
			"extends": "abstract_trader",
			"mixins": ["villager_data"],
			"tags": [
				{
					"key": "Willing",
					"desc": "True if the villager wants to breed. Set to true after some trades, and set to false after breeding.",
					"type": "bool"
				},
				{
					"key": "LastRestock",
					"desc": "The last time the villager worked at their workstation",
					"type": "long"
				},
				{
					"key": "LastGossipDecay",
					"desc": "The last time the villager decreased all gossip values",
					"type": "long"
				},
				{
					"key": "RestocksToday",
					"desc": "The number of times the villager restocked in the current minecraft day",
					"type": "int"
				},
				{
					"key": "Inventory",
					"desc": "The villager's inventory items",
					"aliases": ["Items"],
					"type": "list",
					"typeContext": {
						"item":"item",
						"count": {
							"to": 8
						}
					}
				},
				{
					"key":"MeetingPoint",
					"desc": "The position of the bell block this villager should go to in the meeting time",
					"type": "global_pos",
					"path": ["Brain","memories","minecraft:meeting_point","value"]
				},
				{
					"key":"Home",
					"desc": "The position of this villager's bed",
					"type": "global_pos",
					"path": ["Brain","memories","minecraft:home","value"]
				},
				{
					"key":"JobSite",
					"desc": "The position of this villager's workstation",
					"type": "global_pos",
					"path": ["Brain","memories","minecraft:job_site","value"]
				},
				{
					"key":"LastSlept",
					"desc": "The time this villager has last slept in a bed",
					"type": "long",
					"path": ["Brain","memories","minecraft:last_slept","value"]
				},
				{
					"key":"LastWoken",
					"desc": "The time this villager last woken up from his bed",
					"type": "long",
					"path": ["Brain","memories","minecraft:last_woken","value"]
				},
				{
					"key":"LastWorked",
					"desc": "The time this villager has last worked at his workstation",
					"type": "long",
					"path": ["Brain","memories","minecraft:last_worked_at_poi","value"]
				}
			]
		},
		"vindicator":{
			"extends": "raider",
			"tags": [
				{
					"key": "Johnny",
					"desc": "When true, the vindicator will attack any mob except ghasts and other illagers",
					"type": "bool"
				}
			]
		},
		"wandering_trader":{
			"extends": "abstract_trader",
			"tags": [
				{
					"key": "DespawnDelay",
					"desc": "Time in ticks until the wandering trader despawns",
					"type": "int"
				},
				{
					"key": "WanderTarget",
					"desc": "The destination the wandering trader goes to",
					"type": "xyz"
				}
			]
		},
		"witch":{
			"extends": "raider"
		},
		"wither":{
			"extends": "mob",
			"tags": [
				{
					"key": "Invul",
					"aliases": ["InvulnerableTime"],
					"desc": "Time in ticks left for the wither to be invulnerable",
					"type": "int"
				}
			]
		},
		"wither_skeleton":{
			"extends": "mob"
		},
		"wolf":{
			"extends": "breedable",
			"mixins": ["collar","tamable"],
			"tags": [
				{
					"key": "Angry",
					"desc": "True if the wolf is angry",
					"type": "bool"
				}
			]
		},
		"zombie":{
			"extends": "abstract_zombie",
			"tags": [
				{
					"key": "DrownedConversionTime",
					"aliases": ["drowned_time"],
					"desc": "The number of ticks until the zombie converts into a drowned or a husk to a zombie.",
					"type": "int"
				},
				{
					"key": "InWaterTime",
					"aliases": ["water_time"],
					"desc": "The number of ticksthe zombie has been underwater. Used for starting the drowning conversion.",
					"type": "int"
				}
			]
		},
		"zombie_horse":{
			"extends": "abstract_horse"
		},
		"zombie_pigman":{
			"extends": "abstract_zombie",
			"tags": [
				{
					"key": "Anger",
					"desc": "Ticks until the zombie pigman becomes neutral again after angering on a player.",
					"type": "short"
				},
				{
					"key": "HurtBy",
					"desc": "The UUID of the lasdt player that attacked this zombie pigman",
					"type": "uuid"
				}
			]
		},
		"zombie_villager":{
			"extends": "abstract_zombie",
			"mixins": ["villager_data"],
			"tags": [
				{
					"key": "ConversionTime",
					"desc": "Time in ticks until the zombie villager converts back to a villager",
					"type": "int"
				},
				{
					"key": "ConversionPlayer",
					"desc": "The UUID of the player who started curing this zombie villager",
					"type": "uuid"
				}
			]
		},




		"abstract_projectile":{
			"abstract": true,
			"tags": [
				{
					"key": "Owner",
					"desc": "The UUID of the entity who shot this projectile",
					"type": "uuid"
				}
			]
		},
		"abstract_arrow":{
			"extends": "abstract_projectile",
			"abstract": true,
			"tags": [
				{
					"key": "inGround",
					"desc": "Whether the projectile is stuck into the ground",
					"type": "bool"
				},
				{
					"key":"pickup",
					"type": "indexed_identifier",
					"desc": "The pickup status of the projectile",
					"typeContext": {
						"indexType": "b",
						"numeralIndex":true,
						"values":{
							"0":"never",
							"1":"always",
							"2":"creative_only"
						}
					}
				},
				{
					"key": "life",
					"type": "short",
					"desc": "Increments each tick if the projectile is in the ground. When reaches 1200, it despawns. Resets when it leaves the ground."
				},
				{
					"key": "damage",
					"type": "double",
					"desc": "Amount of damage this projectile deals when hits an entity"
				},
				{
					"key": "crit",
					"aliases": ["critical"],
					"desc": "Whether this projectile deals critical damage",
					"type": "bool"
				},
				{
					"key": "ShotFromCrossbow",
					"aliases": ["crossbow"],
					"type": "bool",
					"desc": "Whether this arrow projectile was shot from a crossbow"
				},
				{
					"key": "PierceLevel",
					"aliases": ["piercing"],
					"desc": "The piercing level of the arrow, if shot from a crossbow with the Piercing enchantment",
					"type": "byte"
				},
				{
					"key": "SoundEvent",
					"aliases": ["hit_sound"],
					"desc": "The sound that plays when the projectile hits",
					"type": "string"
				}
			]
		},
		"arrow":{
			"extends": "abstract_arrow",
			"tags": [
				{
					"key": "Color",
					"desc": "The potion color for the arrow particles",
					"type": "rgb"
				},
				{
					"key": "CustomPotionEffects",
					"aliases": ["effects"],
					"desc": "Custom effects this arrow gives when hitting an entity",
					"type": "list",
					"typeContext": {
						"item":"effect"
					}
				},
				{
					"key": "Potion",
					"desc": "The ID of the default potion effect this arrow contains",
					"type": "enum",
					"typeContext": {
						"builtin":"potion_id"
					}
				}
			]
		},
		"exploding_projectile":{
			"abstract": true,
			"tags": [
				{
					"key": "power",
					"desc": "List of 3 doubles that add to the Motion, to accelerate",
					"type": "list",
					"typeContext": {
						"item":"double",
						"count": 3
					}
				}
			]
		},
		"dragon_fireball":{
			"extends": "exploding_projectile"
		},
		"item_projectile":{
			"abstract": true,
			"extends":"abstract_projectile",
			"tags": [
				{
					"key": "Item",
					"type": "item",
					"desc": "The item this projectile is rendered as. For potions, this is also the potion item"
				}
			]
		},
		"egg":{
			"extends": "item_projectile"
		},
		"ender_pearl":{
			"extends": "item_projectile"
		},
		"experience_bottle":{
			"extends": "item_projectile"
		},
		"abstract_fireball":{
			"extends": "exploding_projectile",
			"abstract": true,
			"tags": [
				{
					"key": "Item",
					"desc": "A custom item to be rendered instead of the default item",
					"type": "item"
				}
			]
		},
		"fireball":{
			"extends": "abstract_fireball",
			"tags": [
				{
					"key": "ExplosionPower",
					"aliases": ["power"],
					"desc": "The radius of explosion this fireball causes",
					"type": "int"
				}
			]
		},
		"llama_spit":{
			"extends": "abstract_projectile"
		},
		"potion":{
			"extends": "item_projectile"
		},
		"shulker_bullet":{
			"extends": "abstract_projectile",
			"tags": [
				{
					"key": "Steps",
					"type": "int",
					"desc": "How many steps it takes to reach the bullet's target. The higher the value, the longer of a path it takes towards the target."
				},
				{
					"key": "Target",
					"type": "uuid",
					"desc": "The UUID of the target entity of the bullet"
				},
				{
					"key": "TXD",
					"aliases": ["TravelX"],
					"desc": "The offset in the X axis to travel",
					"type": "double"
				},
				{
					"key": "TYD",
					"aliases": ["TravelY"],
					"desc": "The offset in the Y axis to travel",
					"type": "double"
				},
				{
					"key": "TZD",
					"aliases": ["TravelZ"],
					"desc": "The offset in the Z axis to travel",
					"type": "double"
				}
			]
		},
		"small_fireball":{
			"extends": "exploding_projectile"
		},
		"snowball":{
			"extends": "item_projectile"
		},
		"spectral_arrow": {
			"extends": "abstract_arrow",
			"tags": [
				{
					"key": "Duration",
					"desc": "The time in ticks that the glowing effect persists",
					"type": "int"
				}
			]
		},
		"trident":{
			"extends": "abstract_arrow",
			"tags": [
				{
					"key": "Trident",
					"aliases": ["Item"],
					"desc": "The trident item that was used",
					"type": "item"
				},
				{
					"key": "DealtDamage",
					"desc": "Whether the trident has already damaged an entity, so it won't deal damage to more entities",
					"type": "bool"
				}
			]
		},
		"wither_skull":{
			"extends": "exploding_projectile"
		},
		"experience_orb":{
			"tags": [
				{
					"key": "Age",
					"desc": "The number of ticks the orb exists. When it reaches 6000, the orb despawns.",
					"type": "short"
				},
				{
					"key": "Health",
					"desc": "The HP of the orb. When reaches 0 the orb is destroyed.",
					"type": "byte"
				},
				{
					"key": "Value",
					"aliases": ["xp","points"],
					"desc": "The amount of experience the orb gives when it's picked up",
					"type": "short"
				}
			]
		},
		"item":{
			"tags": [
				{
					"key": "Age",
					"desc": "The number of ticks the item exists. When it reaches 6000, the item despawns. Setting to -32768 will prevent it from despawning.",
					"type": "short"
				},
				{
					"key": "Health",
					"desc": "The HP of the item entity. When reaches 0 the item is destroyed.",
					"type": "short"
				},
				{
					"key": "PickupDelay",
					"aliases": ["delay"],
					"desc": "The number of ticks until the item can be picked up. Setting to 32767 will prevent it from ever be picked up.",
					"type": "short"
				},
				{
					"key": "Owner",
					"desc":"Only the player with this UUID can pick up the item",
					"type": "uuid"
				},
				{
					"key": "Thrower",
					"desc": "The player who dropped this item",
					"type": "uuid"
				},
				{
					"key": "Item",
					"desc": "The item stack this entity holds",
					"type": "item"
				}
			]
		},


		"boat":{
			"tags": [
				{
					"key": "Type",
					"desc": "The wood type of this boat",
					"type": "enum",
					"typeContext": {
						"values":[
							"oak",
							"spruce",
							"birch",
							"jungle",
							"acacia",
							"dark_oak"
						]
					}
				}
			]
		},
		"minecart":{
			"tags": [
				{
					"key": "CustomDisplayTile",
					"desc": "Whether to display the DisplayState block inside the minecart",
					"type": "bool"
				},
				{
					"key": "DisplayState",
					"aliases": ["display_tile"],
					"desc": "A custom block state to display inside the minecart",
					"type": "block"
				},
				{
					"key": "DisplayState",
					"desc": "Set a custom block to display inside the minecart and make it visible. Sets 'CustomDisplayTile' to true automatically.",
					"type": "block",
					"aliases": ["VisibleDisplayTile","visible_tile"],
					"dontUseKeyAsAlias": true,
					"modifications": {
						"CustomDisplayTile": true
					}
				},
				{
					"key": "DisplayOffset",
					"desc": "The offset of the custom displayed block, in pixels.",
					"type": "int"
				}
			]
		},
		"container_minecart":{
			"abstract": true,
			"extends": "minecart",
			"tags": [
				{
					"key": "Items",
					"desc": "The items stored in this container minecart",
					"type": "list",
					"typeContext": {
						"item":"item"
					}
				},
				{
					"key": "LootTable",
					"desc": "A loot table to be generated when opening this minecart's container",
					"type": "string"
				},
				{
					"key": "LootTableSeed",
					"desc": "A seed for the loot table's RNG",
					"type": "long"
				}
			]
		},
		"chest_minecart":{
			"extends": "container_minecart"
		},
		"command_block_minecart":{
			"extends": "minecart",
			"mixins": ["global.command_container"]
		},
		"furnace_minecart":{
			"extends": "minecart",
			"tags": [
				{
					"key": "PushX",
					"desc": "Force along the X axis created from giving coal to the furnace",
					"type": "double"
				},
				{
					"key": "PushZ",
					"desc": "Force along the Z axis created from giving coal to the furnace",
					"type": "double"
				},
				{
					"key": "Fuel",
					"desc": "The number of ticks until the minecart runs out of fuel",
					"type": "short"
				}
			]
		},
		"hopper_minecart":{
			"extends": "container_minecart",
			"tags": [
				{
					"key": "TransferCooldown",
					"desc": "Time until the next item transfer, in ticks. Can be between 0-8",
					"type": "int"
				},
				{
					"key": "Enabled",
					"desc": "Whether or not the hopper is enabled. Is set to false when the minecart is activated by an activator rail.",
					"type": "bool"
				}
			]
		},
		"spawner_minecart":{
			"extends": "minecart",
			"mixins": ["global.base_spawner"]
		},
		"tnt_minecart":{
			"extends": "minecart",
			"tags": [
				{
					"key": "TNTFuse",
					"desc": "Time until the TNT explodes",
					"type": "int"
				}
			]
		},
		"falling_block":{
			"tags": [
				{
					"key": "BlockState",
					"desc": "The block represented by this falling block",
					"type": "blockstate"
				},
				{
					"key": "TileEntityData",
					"aliases": ["tile_entity"],
					"desc": "Data of the tile entity carried by this falling block",
					"type": "tile_entity",
					"typeContext": {
						"entry":{
							"from":["BlockState","Name"]
						}
					}
				},
				{
					"key": "Time",
					"desc": "The number of ticks the falling block has existed. When reaches 600, it vanishes.",
					"type": "int"
				},
				{
					"key": "DropItem",
					"desc": "Whether to drop the block as an item when broken by falling on a non-full block.",
					"type": "bool"
				},
				{
					"key": "HurtEntities",
					"desc": "Whether to damage entities when falling on them",
					"type": "bool"
				},
				{
					"key": "FallHurtMax",
					"aliases": ["max_damage"],
					"desc": "The maximum damage this falling block can deal when falling on an entity",
					"type": "int"
				},
				{
					"key": "FallHurtAmount",
					"aliases": ["damage_per_distance"],
					"desc": "The damage to deal per block distance this block is falling. Maximum damage is set with 'FallHurtMax'.",
					"type": "float"
				}
			]
		},
		"tnt":{
			"tags": [
				{
					"key": "Fuse",
					"desc": "Ticks until the TNT explodes. Defaults to 80 when a TNT block is ignited.",
					"type": "short"
				}
			]
		},


		"area_effect_cloud":{
			"tags": [
				{
					"key": "Age",
					"desc": "Time the area effect cloud existed. When reaches WaitTime + Duration, the cloud disappears.",
					"type": "int"
				},
				{
					"key": "Color",
					"desc": "The color of the displayed spell particles",
					"type": "rgb"
				},
				{
					"key": "Duration",
					"desc": "The time this cloud can exist after the WaitTime is over",
					"type": "int"
				},
				{
					"key": "ReapplicationDelay",
					"aliases": ["affect_delay"],
					"desc": "The number of ticks before reapplying the effect",
					"type": "int"
				},
				{
					"key":"WaitTime",
					"aliases": ["delay"],
					"desc": "Total time in ticks before the effect field is created",
					"type": "int"
				},
				{
					"key": "DurationOnUse",
					"desc": "Amount to modify the duration by after the effect is applied",
					"type": "int"
				},
				{
					"key": "Owner",
					"type": "uuid",
					"desc": "The owner of this area effect cloud"
				},
				{
					"key": "Radius",
					"desc": "The field's current radius",
					"type": "float"
				},
				{
					"key": "RadiusOnUse",
					"desc": "Amount to modify the radius by after the effect is applied",
					"type": "float"
				},
				{
					"key": "RadiusPerTick",
					"desc": "Amount to modify the radius by every tick",
					"type": "float"
				},
				{
					"key": "Particle",
					"desc": "The particle to display as the effect",
					"type": "string"
				},
				{
					"key": "Potion",
					"desc": "The name of the effect potion type",
					"type": "enum",
					"typeContext": {
						"builtin":"potion_id"
					}
				},
				{
					"key": "Effects",
					"desc": "The effects to apply to any entity who enter this cloud",
					"type": "list",
					"typeContext": {
						"item":"effect"
					}
				}
			]
		},
		"armor_stand":{
			"extends":"living_entity",
			"mixins": ["armor_and_hands"],
			"tags": [
				{
					"key":"Marker",
					"desc": "If true, the armor stand will have no hitbox",
					"type": "bool"
				},
				{
					"key": "Invisible",
					"desc": "If true, the armor stand will not be visible. Items it's holding will still be visible.",
					"type": "bool"
				},
				{
					"key": "Invisible",
					"aliases": ["Visible"],
					"dontUseKeyAsAlias": true,
					"type": "inverted_bool",
					"desc": "If true, the armor stand will be visible"
				},
				{
					"key": "NoBasePlate",
					"aliases": ["no_base"],
					"desc": "If true, the armor stand will not have a base beneath it",
					"type": "bool"
				},
				{
					"key": "NoBasePlate",
					"aliases": ["BasePlate"],
					"desc": "If true, the armor stand will have a base beneath it",
					"type": "inverted_bool"
				},
				{
					"key": "Pose",
					"desc": "Rotation values for the armor stand's pose",
					"type": "nbt",
					"typeContext": {
						"tags":[
							{
								"key":"Body",
								"desc":"The xyz rotation of the main body",
								"type":"list",
								"typeContext":{
									"item":"float",
									"count": 3
								}
							},
							{
								"key":"LeftArm",
								"desc":"The xyz rotation of the left arm",
								"type":"list",
								"typeContext":{
									"item":"float",
									"count": 3
								}
							},
							{
								"key":"RightArm",
								"desc":"The xyz rotation of the right arm",
								"type":"list",
								"typeContext":{
									"item":"float",
									"count": 3
								}
							},
							{
								"key":"LeftLeg",
								"desc":"The xyz rotation of the left leg",
								"type":"list",
								"typeContext":{
									"item":"float",
									"count": 3
								}
							},
							{
								"key":"RightLeg",
								"desc":"The xyz rotation of the right leg",
								"type":"list",
								"typeContext":{
									"item":"float",
									"count": 3
								}
							},
							{
								"key":"Head",
								"desc":"The xyz rotation of the head",
								"type":"list",
								"typeContext":{
									"item":"float",
									"count": 3
								}
							}
						]
					}
				},
				{
					"key": "ShowArms",
					"aliases": ["arms"],
					"desc": "If true, the armor stand will have its arms visible",
					"type": "bool"
				},
				{
					"key": "Small",
					"desc": "If true, the armor stand will be small",
					"type": "bool"
				},
				{
					"key": "DisabledSlots",
					"desc": "Describes which slots can be placed an item in, change the item or remove the item",
					"type": "int"
				}
			]
		},
		"end_crystal":{
			"tags": [
				{
					"key": "ShowBottom",
					"desc": "Whether to show the bedrock plate at the bottom of the crystal",
					"type": "bool"
				},
				{
					"key": "BeamTarget",
					"desc": "The target pos of the beam",
					"type": "xyz"
				}
			]
		},
		"evoker_fangs":{
			"tags": [
				{
					"key": "Warmup",
					"desc": "Ticks until the fangs rise from the ground",
					"type": "int"
				},
				{
					"key": "Owner",
					"desc": "The entity who created this fang. Usually the evoker's UUID.",
					"type": "uuid"
				}
			]
		},
		"eye_of_ender":{
			"tags": [
				{
					"key": "Item",
					"type": "item",
					"desc": "The item this eye of ender is rendered as. Defaults to an eye of ender if absent."
				}
			]
		},
		"firework_rocket":{
			"tags": [
				{
					"key": "Life",
					"desc": "The number of ticks the firework is flying for",
					"type": "int"
				},
				{
					"key": "LifeTime",
					"desc": "The total number of ticks this firework should fly for. Randomized based on the flight duration of the firework item.",
					"type": "int"
				},
				{
					"key": "ShotAtAngle",
					"desc": "Whether the firework was shot from a crossbow",
					"type": "bool"
				},
				{
					"key": "FireworksItem",
					"path": ["FireworksItem","tag"],
					"type": "nbt",
					"typeContext": {
						"registry":"items",
						"entry":"firework_rocket"
					},
					"modifications": {
						"FireworksItem":{
							"id":"minecraft:firework_rocket",
							"Count":1
						}
					}
				}
			]
		},
		"fishing_bobber":{

		},
		"item_frame":{
			"tags": [
				{
					"key": "Facing",
					"desc": "The direction the frame is facing",
					"type": "direction"
				},
				{
					"key": "Item",
					"desc": "The item stack held by this item frame",
					"type": "item"
				},
				{
					"key": "ItemDropChance",
					"type": "float",
					"desc": "The chance of the item to drop when the frame breaks"
				},
				{
					"key": "ItemRotation",
					"type": "byte",
					"desc": "The number of times the item has been rotated 45deg clockwise"
				},
				{
					"key": "Invisible",
					"desc": "True to make this frame invisible",
					"type": "bool"
				},
				{
					"key": "Fixed",
					"desc": "True to prevent this frame from breaking or changing its item",
					"type": "bool"
				}
			]
		},
		"leash_knot":{

		},
		"painting":{
			"tags": [
				{
					"key": "Facing",
					"desc": "The direction the painting is facing",
					"type": "direction"
				},
				{
					"key": "Motive",
					"aliases": ["image","picture"],
					"desc": "The name of the painting image",
					"type": "enum",
					"typeContext": {
						"values":[
							"kebab",
							"aztec",
							"alban",
							"aztec2",
							"bomb",
							"plant",
							"wasteland",
							"wanderer",
							"graham",
							"pool",
							"courbet",
							"sunset",
							"sea",
							"creebet",
							"match",
							"bust",
							"stage",
							"void",
							"skull_and_roses",
							"fighters",
							"skeleton",
							"donkey_kong",
							"pointer",
							"pigscene",
							"burning_skull"
						]
					}
				}
			]
		}
	},
	"mixins": {
		"custom_namable":{
			"tags": [
				{
					"key": "CustomName",
					"aliases": ["name","name_tag"],
					"desc": "A custom name for this entity. Shown above their head and in death messages",
					"type": "json",
					"typeContext": {
						"json_text":"title"
					}
				},
				{
					"key": "CustomNameVisible",
					"aliases": ["name_visible","show_name"],
					"desc": "When true, the custom name of this entity will always be visible above their head",
					"type": "bool"
				},
				{
					"key": "CustomName",
					"desc": "Sets a custom name for this entity and makes it always visible",
					"dontUseKeyAsAlias": true,
					"aliases": ["visible_name"],
					"type": "json",
					"typeContext": {
						"json_text":"title"
					},
					"modifications": {
						"CustomNameVisible":true
					}
				}
			]
		},
		"armor_and_hands":{
			"tags": [
				{
					"key": "chestplate",
					"type": "item",
					"desc": "The mob's chestplate item",
					"path":["ArmorItems","[2]"],
					"modifications": {
						"ArmorItems":[{},{},{},{}]
					}
				},
				{
					"key":"helmet",
					"type": "item",
					"desc": "The mob's helmet item",
					"path":["ArmorItems","[3]"],
					"modifications": {
						"ArmorItems":[{},{},{},{}]
					}
				}
			]
		},
		"tamable":{
			"tags": [
				{
					"key": "Owner",
					"desc": "The UUID of the player who owns this mob",
					"type": "uuid"
				},
				{
					"key": "Sitting",
					"desc": "True if the mob is sitting",
					"type": "bool"
				}
			]
		},
		"collar":{
			"tags": [
				{
					"key": "CollarColor",
					"desc": "The color of this cat/wolf collar",
					"type": "color_id",
					"aliases": ["collar"]
				}
			]
		},
		"eating_horse":{
			"tags": [
				{
					"key": "EatingHaystack",
					"aliases": ["eating"],
					"desc": "Whether this horse is eating",
					"type": "bool"
				},
				{
					"key": "Temper",
					"desc": "The higher this value is, this horse is easier to tame. Increased by feeding.",
					"type": "int"
				}
			]
		},
		"saddled_horse":{
			"tags": [
				{
					"key": "SaddleItem",
					"aliases": ["saddle"],
					"desc": "The horse's saddle item",
					"type": "item"
				}
			]
		},
		"saddlable":{
			"tags": [
				{
					"key": "Saddled",
					"desc": "Whether this mob has a saddle",
					"type": "bool"
				}
			]
		},
		"villager_offers":{
			"tags": [
				{
					"key": "Offers",
					"desc": "The offers this villager can be traded for. Generated when the villager is clicked on.",
					"type": "list",
					"typeContext": {
						"item":"nbt",
						"itemContext":{
							"tags":[
								{
									"key":"rewardExp",
									"aliases":["givesXp"],
									"desc":"Whether this trades gives XP reward for buying this trade",
									"type":"bool"
								},
								{
									"key":"maxUses",
									"desc":"Maximum number of times this trade can be used before it is locked",
									"type":"int"
								},
								{
									"key":"uses",
									"desc":"Number of times this trade has been bought",
									"type":"int"
								},
								{
									"key":"buy",
									"desc":"The first item the player should give",
									"type":"item"
								},
								{
									"key":"buyB",
									"desc":"The second item the player should give",
									"type":"item"
								},
								{
									"key":"sell",
									"desc":"The item the villager is giving back to the player",
									"type":"item"
								},
								{
									"key":"xp",
									"desc":"How much experience the villager gets when this trade has been used",
									"type":"int"
								},
								{
									"key":"priceMultiplier",
									"aliases":["multiplier"],
									"desc":"A value that adjusts the 'demand' value",
									"type":"float"
								},
								{
									"key":"specialPrice",
									"type":"int",
									"desc":"A value added to the first 'buy' item"
								},
								{
									"key":"demand",
									"type":"int",
									"desc":"A value multiplied by the 'priceMultiplier' value and added to the price of the first 'buy' item"
								}
							]
						}
					},
					"path": ["Offers","Recipes"]
				}
			]
		},
		"villager_data":{
			"extends": "villager_offers",
			"tags": [
				{
					"key": "level",
					"desc": "The villager's current level. Controls what trades are available.",
					"type": "indexed_identifier",
					"typeContext": {
						"numeralIndex":true,
						"values":{
							"1":"novice",
							"2":"apprentice",
							"3":"journeyman",
							"4":"expert",
							"5":"master"
						}
					},
					"path": ["VillagerData","level"]
				},
				{
					"key": "profession",
					"desc": "The villager's profession",
					"type": "enum",
					"typeContext": {
						"builtin":"villager_professions"
					},
					"path": ["VillagerData","profession"]
				},
				{
					"key": "type",
					"desc": "The villager biome-specific skin",
					"type": "enum",
					"typeContext": {
						"values":[
							"desert",
							"jungle",
							"plains",
							"savanna",
							"snow",
							"swamp",
							"taiga"
						]
					},
					"path": ["VillagerData","type"]
				},
				{
					"key": "Gossips",
					"desc": "The villager's gossiping data. Villagers share those values when they meet.",
					"type": "list",
					"typeContext": {
						"item":"nbt",
						"itemContext":{
							"tags":[
								{
									"key":"Type",
									"desc":"The ID of the gossip type. \nmajor_negative: Created when another villager nearby is killed by a player\nminor_negative: Created when a player attacks this villager\nmajor_positive and minor_positive: Created when this villager has been cured from a zombie villager\ntrading: Created when the player trades with this villager.",
									"type":"enum",
									"typeContext":{
										"values":[
											"major_negative",
											"minor_negative",
											"major_positive",
											"minor_positive",
											"trading"
										]
									}
								},
								{
									"key":"Value",
									"desc":"The value associated with this gossip. All gossip types except major_positive are sharing this value and it decays every once in a while.",
									"type":"int"
								},
								{
									"key":"Target",
									"desc":"The UUID of the player who caused this gossip",
									"type":"uuid"
								}
							]
						}
					}
				},
				{
					"key": "Xp",
					"desc": "Amount of XP the villager has. Increased when trading and affects the villager's level.",
					"type": "int"
				}
			]
		}
	}
}