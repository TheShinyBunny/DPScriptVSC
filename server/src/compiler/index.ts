import { toLowerCaseUnderscored, parseBlock } from "./util";
import * as path from 'path';
import { Position, Location } from 'vscode-languageserver';
import { Evaluator } from './parser';

export class DatapackProject {
    description: string
    primaryNamespace: Namespace
    mcNamespace: Namespace
    namespaces: Namespace[] = []

    constructor(public name: string, private root: string) {
        this.description = "A datapack generated by DPScript"
    }

    getNamespaceForFile(file: string) {
        let dir = path.dirname(file);
        if (dir == this.root) {
            if (this.primaryNamespace) return this.primaryNamespace;
            this.primaryNamespace = new Namespace(toLowerCaseUnderscored(this.name));
            this.namespaces.push(this.primaryNamespace);
            return this.primaryNamespace;
        }
        let dirname = dir.split(path.sep).pop();
        let ns = this.namespaces.find(n=>n.name == dirname);
        if (ns) return ns;
        ns = new Namespace(toLowerCaseUnderscored(dirname));
        this.namespaces.push(ns);
        return ns;
    }

    reset() {
        this.namespaces = []
        this.primaryNamespace = undefined
    }

    
}

export class Namespace {
	
    items: DatapackItem[] = [];
    ticks: MCFunction[] = [];
    loads: MCFunction[] = [];

    constructor(public name: string) {

    }

    toString() {
        return this.name;
    }

    getFunction(name: string) {
        for (let i of this.items) {
            if (i instanceof MCFunction && i.name == name) {
                return i;
            }
        }
    }
    
    add(item: DatapackItem) {
		this.items.push(item);
    }
}

export abstract class DatapackItem {

    constructor(public loc: ResourceLocation) {

    }
    abstract save(dir: string): void;

    abstract dirName: string;
}

export interface WritingTarget {
    add: (...cmd: string[])=>void;
}

export class ResourceLocation {
    constructor(public ns: Namespace, public path: string) {}

    toString() {
        return this.ns.name + ':' + this.path;
    }
}

export class MCFunction extends DatapackItem implements WritingTarget {
    
    commands: string[] = [];
    dirName = "functions";
    declaration: Location

    constructor(loc: ResourceLocation, public name: string) {
        super(loc);
    }

    add(...cmd: string[]) {
        for (let c of cmd) {
            console.log("+ " + c);
        }
        this.commands.push(...cmd);
    }

    save(dir: string) {

    }
    
    toString() {
        return this.loc.toString();
    }
}

